# Path to your oh-my-zsh installation.
export ZSH_DISABLE_COMPFIX="true"
export ZSH="$HOME/.oh-my-zsh"
export ZSH_CACHE_DIR="$ZSH/cache"

# Add XDG base directory specification support.
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# Save reference to dotfiles directory.
export DOTFILES=$(cd -P "$(dirname "$(readlink $HOME/.zshrc)")" \
  >/dev/null 2>&1 && git rev-parse --show-toplevel)

# Completion System Configuration
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path $ZSH_CACHE_DIR
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Load completions system
autoload -Uz compinit
if [ $(date +'%j') != $(stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null) ]; then
  compinit
else
  compinit -C
fi

# Enable completion menu
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Oh My Zsh settings
export UPDATE_ZSH_DAYS=7
export DISABLE_AUTO_TITLE="false"
export ENABLE_CORRECTION="false"
export USER="$USER" # Ensure USER is exported for completion system

eval "$(/opt/homebrew/bin/brew shellenv)"

# NVM configuration
export NVM_LAZY="true"
export NVM_COMPLETION="true"

# History configuration
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt EXTENDED_HISTORY       # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY     # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY          # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS       # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS   # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS      # Do not display a previously found event.
setopt HIST_IGNORE_SPACE      # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS      # Do not write a duplicate event to the history file.
setopt HIST_VERIFY            # Do not execute immediately upon history expansion.

# Load plugins in optimal order
# Plugin order matters! Add plugins wisely as they impact shell startup time.
# 1. Core plugins first (git)
# 2. UI/UX enhancements (256color, autosuggestions)
# 3. zsh-syntax-highlighting must be last
plugins=(
  git                          # Load git first as other plugins might depend on it
  zsh-256color                 # Terminal color support
  zsh-autosuggestions          # Suggestions based on history
  zsh-history-substring-search # Better history search (depends on syntax-highlighting)
  zsh-syntax-highlighting      # Must be last for proper highlighting
)

source "$ZSH/oh-my-zsh.sh"

# Shell options for better performance
setopt AUTO_CD              # If a command is a directory, cd into it
setopt AUTO_PUSHD           # Push dirs into directory stack
setopt PUSHD_IGNORE_DUPS    # Don't push duplicates into directory stack
setopt PUSHD_MINUS          # Exchange meaning of + and - when used with a number to specify a directory
setopt GLOB_DOTS            # Include dotfiles in globbing
setopt NO_CASE_GLOB         # Case insensitive globbing
setopt EXTENDED_GLOB        # Extended globbing. Allows using regular expressions with *
setopt NUMERIC_GLOB_SORT    # Sort filenames numerically when it makes sense
setopt NO_FLOW_CONTROL      # Disable start/stop characters in shell editor
setopt INTERACTIVE_COMMENTS # Allow comments in interactive shell

# User configuration - keep source order for dependencies
# source "$DOTFILES/zsh/export.sh"    # Define environment variables first
source "$DOTFILES/zsh/options.sh" # Shell options next
# source "$DOTFILES/zsh/path.sh"      # Then extend $PATH
source "$DOTFILES/zsh/functions.sh" # Load functions after PATH is set
source "$DOTFILES/zsh/iterm2.zsh"   # iTerm2 integration after functions
source "$DOTFILES/zsh/alias.sh"     # Aliases last as they might use functions
source "$HOME/env.sh" 2>/dev/null   # Optional overrides at the very end

# Initial PATH setup (before lazy loading)
export PATH="$HOME/.rvm/bin:$PATH"
export PATH="${HOME}/perl5/bin:${PATH:+:${PATH}}"

# Lazy load brew
if [[ -x "/opt/homebrew/bin/brew" ]]; then
  brew() {
    unset -f brew
    if [[ -x "/opt/homebrew/bin/brew" ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
      brew "$@"
    else
      echo "Error: Homebrew is not installed" >&2
      return 1
    fi
  }
fi

# Lazy load fzf
if [[ -f "$HOME/.fzf.zsh" ]]; then
  fzf() {
    unset -f fzf
    if [[ -f "$HOME/.fzf.zsh" ]]; then
      source "$HOME/.fzf.zsh"
      fzf "$@"
    else
      echo "Error: FZF is not installed" >&2
      return 1
    fi
  }
  # Lazy load fzf-related commands
  fzf-history-widget() {
    unset -f fzf fzf-history-widget fzf-cd-widget fzf-file-widget
    if [[ -f "$HOME/.fzf.zsh" ]]; then
      source "$HOME/.fzf.zsh"
      fzf-history-widget "$@"
    else
      echo "Error: FZF is not installed" >&2
      return 1
    fi
  }
  fzf-cd-widget() {
    unset -f fzf fzf-history-widget fzf-cd-widget fzf-file-widget
    if [[ -f "$HOME/.fzf.zsh" ]]; then
      source "$HOME/.fzf.zsh"
      fzf-cd-widget "$@"
    else
      echo "Error: FZF is not installed" >&2
      return 1
    fi
  }
  fzf-file-widget() {
    unset -f fzf fzf-history-widget fzf-cd-widget fzf-file-widget
    if [[ -f "$HOME/.fzf.zsh" ]]; then
      source "$HOME/.fzf.zsh"
      fzf-file-widget "$@"
    else
      echo "Error: FZF is not installed" >&2
      return 1
    fi
  }
  # Set up key bindings that will trigger lazy loading
  bindkey '^R' fzf-history-widget
  bindkey '^T' fzf-file-widget
  bindkey '\ec' fzf-cd-widget
fi

# Lazy load tmux
if command -v tmux &>/dev/null; then
  function tmux() {
    unfunction tmux
    command tmux "$@"
  }
fi

# Lazy load pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  pyenv() {
    unset -f pyenv
    if command -v pyenv 1>/dev/null 2>&1; then
      eval "$(command pyenv init -)"
      eval "$(command pyenv init --path)"
      pyenv "$@"
    else
      echo "Error: Pyenv is not installed" >&2
      return 1
    fi
  }
  # Create shims for python and pip
  python() {
    unset -f python pip
    if command -v pyenv 1>/dev/null 2>&1; then
      eval "$(command pyenv init -)"
      eval "$(command pyenv init --path)"
      python "$@"
    else
      echo "Error: Pyenv is not installed" >&2
      return 1
    fi
  }
  pip() {
    unset -f python pip
    if command -v pyenv 1>/dev/null 2>&1; then
      eval "$(command pyenv init -)"
      eval "$(command pyenv init --path)"
      pip "$@"
    else
      echo "Error: Pyenv is not installed" >&2
      return 1
    fi
  }
fi

# Lazy load NVM
nvm() {
  export NVM_DIR="$HOME/.config/nvm"
  if [[ -s "$NVM_DIR/nvm.sh" ]]; then
    unset -f nvm node npm npx
    source "$NVM_DIR/nvm.sh"
    nvm "$@"
  else
    echo "Error: NVM is not installed. Please install NVM using:" >&2
    echo "  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash" >&2
    echo "  or visit: https://github.com/nvm-sh/nvm#installing-and-updating" >&2
    return 1
  fi
}
node() {
  export NVM_DIR="$HOME/.config/nvm"
  if [[ -s "$NVM_DIR/nvm.sh" ]]; then
    unset -f nvm node npm npx
    source "$NVM_DIR/nvm.sh"
    node "$@"
  else
    echo "Error: NVM is not installed. Please install NVM using:" >&2
    echo "  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash" >&2
    echo "  or visit: https://github.com/nvm-sh/nvm#installing-and-updating" >&2
    return 1
  fi
}
npm() {
  export NVM_DIR="$HOME/.config/nvm"
  if [[ -s "$NVM_DIR/nvm.sh" ]]; then
    unset -f nvm node npm npx
    source "$NVM_DIR/nvm.sh"
    npm "$@"
  else
    echo "Error: NVM is not installed. Please install NVM using:" >&2
    echo "  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash" >&2
    echo "  or visit: https://github.com/nvm-sh/nvm#installing-and-updating" >&2
    return 1
  fi
}
npx() {
  export NVM_DIR="$HOME/.config/nvm"
  if [[ -s "$NVM_DIR/nvm.sh" ]]; then
    unset -f nvm node npm npx
    source "$NVM_DIR/nvm.sh"
    npx "$@"
  else
    echo "Error: NVM is not installed. Please install NVM using:" >&2
    echo "  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash" >&2
    echo "  or visit: https://github.com/nvm-sh/nvm#installing-and-updating" >&2
    return 1
  fi
}

# Lazy load RVM
rvm() {
  unset -f rvm ruby gem rake bundle
  if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    source "$HOME/.rvm/scripts/rvm"
    rvm "$@"
  else
    echo "Error: RVM is not installed" >&2
    return 1
  fi
}
ruby() {
  unset -f rvm ruby gem rake bundle
  if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    source "$HOME/.rvm/scripts/rvm"
    ruby "$@"
  else
    echo "Error: RVM is not installed" >&2
    return 1
  fi
}
gem() {
  unset -f rvm ruby gem rake bundle
  if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    source "$HOME/.rvm/scripts/rvm"
    gem "$@"
  else
    echo "Error: RVM is not installed" >&2
    return 1
  fi
}
rake() {
  unset -f rvm ruby gem rake bundle
  if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    source "$HOME/.rvm/scripts/rvm"
    rake "$@"
  else
    echo "Error: RVM is not installed" >&2
    return 1
  fi
}
bundle() {
  unset -f rvm ruby gem rake bundle
  if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    source "$HOME/.rvm/scripts/rvm"
    bundle "$@"
  else
    echo "Error: RVM is not installed" >&2
    return 1
  fi
}

# Initialize starship prompt
eval "$(starship init zsh)"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Perl local lib configuration
export PERL5LIB="${HOME}/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL_LOCAL_LIB_ROOT="${HOME}/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_MB_OPT="--install_base \"${HOME}/perl5\""
export PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"

# Tmux session restoration
tmux ls >/dev/null 2>&1 || (tmux start-server && tmux new -s dummy -d && sleep 1s && tmux kill-session -t dummy)
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
